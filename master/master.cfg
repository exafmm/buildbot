# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [
    buildslave.BuildSlave("Tokyo", "pass"),
    buildslave.BuildSlave("Tohoku", "pass"),
    buildslave.BuildSlave("Kyoto", "pass"),
    buildslave.BuildSlave("Nagoya", "pass"),
    buildslave.BuildSlave("Narumi", "pass"),
    buildslave.BuildSlave("Yasuoka", "pass"),
    buildslave.BuildSlave("Stelletto", "pass"),
    buildslave.BuildSlave("CBRC", "pass"),
    buildslave.BuildSlave("Shaheen2", "pass"),
    buildslave.BuildSlave("Stampede", "pass"),
    buildslave.BuildSlave("Leibniz", "pass")
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
    'github:exafmm/exafmm.git',
    workdir='gitpoller-workdir',
    branch='master',
    pollinterval=10)
)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="all",
    change_filter=util.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=["Tokyo","Tohoku","Kyoto","Nagoya","Narumi","Yasuoka","Stelletto","CBRC","Shaheen2","Stampede","Leibniz"])
)
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=["Tokyo","Tohoku","Kyoto","Nagoya","Narumi","Yasuoka","Stelletto","CBRC","Shaheen2","Stampede","Leibniz"])
)
c['schedulers'].append(schedulers.Try_Userpass(
    name='try',
    builderNames=["Tokyo","Tohoku","Kyoto","Nagoya","Narumi","Yasuoka","Stelletto","CBRC","Shaheen2","Stampede","Leibniz"],
    port=9989,
    userpass=[('exafmm','exafmm')])
)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

update = steps.Git(repourl='https://github.com/exafmm/exafmm.git', mode='incremental')
c_fx = steps.ShellCommand(name="configure",command=["./configure","--enable-assert","--enable-mpi","--disable-simd","CXXFLAGS=-Kfast,openmp","--host=host"])
c_sx = steps.ShellCommand(name="configure",command=["./configure","--disable-simd","CXXFLAGS=-Nacct","--host=host"])
c_xc = steps.ShellCommand(name="configure",command=["./configure","--enable-assert","--enable-float","--enable-mpi","--enable-avx","CXXFLAGS=-O3 -fabi-version=6"])
c_32_omp_avx_tbb = steps.ShellCommand(name="configure",command=["./configure","--enable-assert","--enable-float","--enable-openmp","--enable-avx","--with-tbb","CXXFLAGS=-O3 -fabi-version=4"])
c_32_mpi_omp_avx_tbb = steps.ShellCommand(name="configure",command=["./configure","--enable-assert","--enable-float","--enable-mpi","--enable-openmp","--enable-avx","--with-tbb","CXXFLAGS=-O3 -fabi-version=4"])
configure = steps.ShellCommand(name="configure",command=["./configure","--host=host"])
lapl_cart = steps.ShellCommand(name="compile laplace_cartesian",command=["make","-C","examples","laplace_cartesian"])
run = steps.ShellCommand(name="run",command=["examples/laplace_cartesian","-Dgmovx","-n","100000"])
r_tokyo = steps.ShellCommand(name="run",command=["bash","/home/f23004/sub.sh"])
r_tohoku = steps.ShellCommand(name="run",command=["bash","/uhome/y00426/sub.sh"])
r_nagoya = steps.ShellCommand(name="run",command=["bash","/home/usr2/z41002z/sub.sh"])
f_tokyo = util.BuildFactory([update,c_fx,lapl_cart,r_tokyo])
f_tohoku = util.BuildFactory([update,c_sx,lapl_cart,r_tohoku])
f_kyoto = util.BuildFactory([update,c_xc,lapl_cart,run])
f_nagoya = util.BuildFactory([update,c_fx,lapl_cart,r_nagoya])
f_narumi = util.BuildFactory([update,c_32_mpi_omp_avx_tbb,lapl_cart,run])
f_yasuoka = util.BuildFactory([update,c_32_mpi_omp_avx_tbb,lapl_cart,run])
f_stelletto = util.BuildFactory([update,c_32_mpi_omp_avx_tbb,lapl_cart,run])
f_cbrc = util.BuildFactory([update,c_32_mpi_omp_avx_tbb,lapl_cart,run])
f_shaheen2 = util.BuildFactory([update,c_xc,lapl_cart,run])
f_stampede = util.BuildFactory([update,c_32_omp_avx_tbb,lapl_cart,run])
f_leibniz = util.BuildFactory([update,c_32_omp_avx_tbb,lapl_cart,run])
factory = util.BuildFactory([update,configure,lapl_cart])

c['builders'] = []
c['builders'].append(util.BuilderConfig(name="Tokyo",slavenames=["Tokyo"],factory=f_tokyo))
c['builders'].append(util.BuilderConfig(name="Tohoku",slavenames=["Tohoku"],factory=f_tohoku))
c['builders'].append(util.BuilderConfig(name="Kyoto",slavenames=["Kyoto"],factory=f_kyoto))
c['builders'].append(util.BuilderConfig(name="Nagoya",slavenames=["Nagoya"],factory=f_nagoya))
c['builders'].append(util.BuilderConfig(name="Narumi",slavenames=["Narumi"],factory=f_narumi))
c['builders'].append(util.BuilderConfig(name="Yasuoka",slavenames=["Yasuoka"],factory=f_yasuoka))
c['builders'].append(util.BuilderConfig(name="Stelletto",slavenames=["Stelletto"],factory=f_stelletto))
c['builders'].append(util.BuilderConfig(name="CBRC",slavenames=["CBRC"],factory=f_cbrc))
c['builders'].append(util.BuilderConfig(name="Shaheen2",slavenames=["Shaheen2"],factory=f_shaheen2))
c['builders'].append(util.BuilderConfig(name="Stampede",slavenames=["Stampede"],factory=f_stampede))
c['builders'].append(util.BuilderConfig(name="Leibniz",slavenames=["Leibniz"],factory=f_leibniz))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("exafmm","exafmm")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "exaFMM"
c['titleURL'] = "https://github.com/exafmm/exafmm"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
