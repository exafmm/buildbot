# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
import os

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
        worker.Worker("Phantom", "pass"),
        worker.Worker("Theo", "pass"),
        worker.Worker("Login", "pass")]
workers = ["Phantom", "Theo", "Login"]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/exafmm/exafmm-t.git',
        workdir='gitpoller-workdir', branch='master',
        pollInterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.Try_Userpass(
                            name="try",
                            builderNames=["runtests"],
                            port=9989,
                            userpass=[('exafmm', 'exafmm')]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# define the steps 
## update git repo
update = steps.Git(repourl='https://github.com/exafmm/exafmm-t.git', mode='incremental')

## update timestamps using 'touch' since git does not preserve timestamps
## see https://stackoverflow.com/questions/33278928/how-to-overcome-aclocal-1-15-is-missing-on-your-system-warning
## if the structure of the recursive make is changed, mdirs should be modified accordingly
mfiles = ['Makefile.am', 'Makefile.in']   # name of Makefiles
mdirs = ['', 'tests', 'wrappers', 'wrappers/bempp']   # name of directories that have a Makefile
makefiles = [os.path.join(mdir, mfile) for mfile in mfiles for mdir in mdirs]
touch = steps.ShellCommand(command=["touch", "aclocal.m4", "configure"]+makefiles)

## configure
config = steps.ShellCommand(command=["./configure"])
config_debug = steps.ShellCommand(command=["./configure", "--enable-debug"])   # turn on debug mode
config_float = steps.ShellCommand(command=["./configure", "--enable-float"])   # use single precision

## make
make = steps.ShellCommand(command=["make"])

# define the factory
f_simple = util.BuildFactory([update, touch, config, make])

c['builders'] = []
c['builders'].append(util.BuilderConfig(name="runtests",
                                        workernames=workers,
                                        factory=f_simple))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "exafmm-t"
c['titleURL'] = "https://github.com/exafmm/exafmm-t"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://35.236.198.241:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
