# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [
    buildslave.BuildSlave('CBRC', 'pass'),
    buildslave.BuildSlave('EC00', 'pass'),
    buildslave.BuildSlave('Kyoto', 'pass'),
    buildslave.BuildSlave('Leibniz', 'pass'),
    buildslave.BuildSlave('Shaheen2', 'pass'),
    buildslave.BuildSlave('Taura', 'pass'),
    buildslave.BuildSlave('Tokyo', 'pass'),
    buildslave.BuildSlave('Yasuoka', 'pass'),
    buildslave.BuildSlave('Yokota01', 'pass'),
    buildslave.BuildSlave('Yokota02', 'pass')
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of exafmm.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
    'github:exafmm/exafmm.git',
    workdir='gitpoller-workdir',
    branches=['develop','master'],
    pollinterval=10)
)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

b_all=['CBRC',
       'EC00',
       #'Kyoto',# suspended until 10/3 for system replacement
       'Leibniz',
       'Shaheen2',
       'Taura',
       'Tokyo',
       'Yasuoka',
       'Yokota01',
       'Yokota02']
b_nightly=['Nightly']

c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name='all',
    treeStableTimer=None,
    builderNames=b_all)
)
c['schedulers'].append(schedulers.ForceScheduler(
    name='force',
    builderNames=b_all)
)
c['schedulers'].append(schedulers.Try_Userpass(
    name='try',
    builderNames=b_all,
    port=9989,
    userpass=[('exafmm','exafmm')])
)
c['schedulers'].append(schedulers.Nightly(
    name='nightly',
    branch='develop',
    builderNames=b_nightly,
    hour=22,
    minute=0,
    onlyIfChanged=True)
)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

env = steps.SetPropertiesFromEnv(variables=['HOME'])
update = steps.Git(repourl='https://github.com/exafmm/exafmm.git', mode='incremental')

c_mpi_host = steps.ShellCommand(name='configure',command=['./configure','--enable-assert','--enable-mpi','--disable-simd','--host=host','FCFLAGS='])
c_32_omp_avx_tbb = steps.ShellCommand(name='configure',command=['./configure','--enable-assert','--enable-float','--enable-openmp','--enable-avx','--with-tbb'])
c_32_mpi_omp_avx = steps.ShellCommand(name='configure',command=['./configure','--enable-assert','--enable-float','--enable-mpi','--enable-openmp','--enable-avx'])
c_32_mpi_omp_avx_tbb = steps.ShellCommand(name='configure',command=['./configure','--enable-assert','--enable-float','--enable-mpi','--enable-openmp','--enable-avx','--with-tbb'])

#make = steps.ShellCommand(name='make',command=['make'])
make = steps.ShellCommand(name='make',command=['make','clean','cleanall','all'])
ls_reg = steps.ShellCommand(name='ls reg',command=['ls','./wrappers/'])

run_lapl_cart = steps.ShellCommand(name='run Laplace Cartesian',command=['./examples/fmm','-e','laplace','-b','cartesian','-P','10','-DmMovx','-n','100000','-p','./examples/','-r','10'])
sub_lapl_cart = steps.ShellCommand(name='submit Laplace Cartesian',command=['bash',util.Interpolate('%(prop:HOME)s/sub.sh'),'./examples/fmm','-e','laplace','-b','cartesian','-P','10','-DmMovx','-n','100000','-p','./examples/','-r','10'])

run_lapl_sphe = steps.ShellCommand(name='run Laplace Spherical',command=['./examples/fmm','-e','laplace','-b','spherical','-P','10','-Dmovx','-n','100000','-p','./examples/','-r','10'])
sub_lapl_sphe = steps.ShellCommand(name='submit Laplace Spherical',command=['bash',util.Interpolate('%(prop:HOME)s/sub.sh'),'./examples/fmm','-e','laplace','-b','spherical','-P','10','-Dmovx','-n','100000','-p','./examples/','-r','10'])

run_helm_sphe = steps.ShellCommand(name='run Helmholtz Spherical',command=['./examples/fmm','-e','helmholtz','-b','spherical','-P','14','-v','-n','100000','-p','./examples/','-r','10'])
sub_helm_sphe = steps.ShellCommand(name='submit Helmholtz Spherical',command=['bash',util.Interpolate('%(prop:HOME)s/sub.sh'),'./examples/fmm','-e','helmholtz','-b','spherical','-P','14','-v','-n','100000','-p','./examples/','-r','10'])

run_biot_sphe = steps.ShellCommand(name='run Biot-Savart Spherical',command=['./examples/fmm','-e','biotsavart','-b','spherical','-P','10','-v','-n','100000','-p','./examples/','-r','10'])
sub_biot_sphe = steps.ShellCommand(name='submit Biot-Savart Spherical',command=['bash',util.Interpolate('%(prop:HOME)s/sub.sh'),'./examples/fmm','-e','biotsavart','-b','spherical','-P','10','-v','-n','100000','-p','./examples/','-r','10'])

run_lapl_cart_mpi = steps.ShellCommand(name='run Laplace Cartesian MPI',command=['mpirun','-n','2','./examples/fmm_mpi','-e','laplace','-b','cartesian','-P','10','-DmMovx','-n','100000','-p','./examples/','-r','10'])
sub_lapl_cart_mpi = steps.ShellCommand(name='submit Laplace Cartesian MPI',command=['bash',util.Interpolate('%(prop:HOME)s/sub.sh'),'./examples/fmm_mpi','-e','laplace','-b','cartesian','-P','10','-DmMovx','-n','100000','-p','./examples/','-r','10'])

run_charmm = steps.ShellCommand(name='run charmm',command=['mpirun','-n','2','./wrappers/charmm_mpi','./wrappers/','water_32.fmm','water.out','0'])
sub_charmm = steps.ShellCommand(name='submit charmm',command=['bash',util.Interpolate('%(prop:HOME)s/sub.sh'),'./wrappers/charmm_mpi','./wrappers/','water_32.fmm','water.out','0'])

run_gromacs = steps.ShellCommand(name='run gromacs',command=['mpirun','-n','2','./wrappers/gromacs_mpi'])
sub_gromacs = steps.ShellCommand(name='submit gromacs',command=['bash',util.Interpolate('%(prop:HOME)s/sub.sh'),'./wrappers/gromacs_mpi'])

run_md_distributed = steps.ShellCommand(name='run md_distributed',command=['mpirun','-n','2','./wrappers/md_distributed_mpi'])
sub_md_distributed = steps.ShellCommand(name='submit md_distributed',command=['bash',util.Interpolate('%(prop:HOME)s/sub.sh'),'./wrappers/md_distributed_mpi'])

run_petiga_laplace = steps.ShellCommand(name='run petiga_laplace',command=['mpirun','-n','2','./wrappers/petiga_laplace_mpi'])
sub_petiga_laplace = steps.ShellCommand(name='submit petiga_laplace',command=['bash',util.Interpolate('%(prop:HOME)s/sub.sh'),'./wrappers/petiga_laplace_mpi'])

f_cbrc = util.BuildFactory([env,update,c_32_omp_avx_tbb,make,run_lapl_cart])
f_kyoto = util.BuildFactory([env,update,c_32_mpi_omp_avx_tbb,make,sub_lapl_cart,sub_lapl_cart_mpi,sub_charmm,sub_gromacs,sub_md_distributed,sub_petiga_laplace])
f_leibniz = util.BuildFactory([env,update,c_32_omp_avx_tbb,make,run_lapl_cart])
f_nightly = util.BuildFactory([env,update])
f_shaheen2 = util.BuildFactory([env,update,c_32_mpi_omp_avx_tbb,make,sub_lapl_cart,sub_lapl_cart_mpi,sub_charmm,sub_gromacs,sub_md_distributed,sub_petiga_laplace])
f_stelletto = util.BuildFactory([env,update,c_32_mpi_omp_avx_tbb,make,run_lapl_cart,run_lapl_cart_mpi,run_charmm,run_gromacs,run_md_distributed,run_petiga_laplace])
f_taura = util.BuildFactory([env,update,c_32_mpi_omp_avx_tbb,make,run_lapl_cart,run_lapl_cart_mpi,run_charmm,run_gromacs,run_md_distributed,run_petiga_laplace])
f_tokyo = util.BuildFactory([env,update,c_mpi_host,make,sub_lapl_cart,sub_lapl_cart_mpi,sub_charmm,sub_gromacs,sub_md_distributed,sub_petiga_laplace])
f_yasuoka = util.BuildFactory([env,update,c_32_mpi_omp_avx_tbb,make,run_lapl_cart,run_lapl_cart_mpi,ls_reg,run_charmm,run_gromacs,run_md_distributed,run_petiga_laplace])
f_yokota01 = util.BuildFactory([env,update,c_32_mpi_omp_avx_tbb,make,run_lapl_cart,run_lapl_sphe,run_helm_sphe,run_biot_sphe,run_lapl_cart_mpi,run_charmm,run_gromacs,run_md_distributed,run_petiga_laplace])
f_yokota02 = util.BuildFactory([env,update,c_32_mpi_omp_avx_tbb,make,run_lapl_cart,run_lapl_sphe,run_helm_sphe,run_biot_sphe,run_lapl_cart_mpi,run_charmm,run_gromacs,run_md_distributed,run_petiga_laplace])

import itertools
#simdList = ['--disable-simd','--enable-sse3','--enable-avx']
simdList = ['--enable-avx']
#threadList = ['--with-tbb','--with-cilk','--with-mthread']
threadList = ['--with-tbb']
#configList = ['--enable-float','--enable-kahan','--enable-openmp']
configList = ['--enable-float']
for simd in simdList:
  for thread in threadList:
    for numConfig in range(0, len(configList)+1):
      for config in itertools.combinations(configList, numConfig):
        config = ' '.join(['./configure',' '.join(config),simd,thread])
        f_nightly.addStep(steps.ShellCommand(command=config))
        f_nightly.addStep(make)
        f_nightly.addStep(steps.ShellCommand(command=['python','./nightly.py']))

c['builders'] = []
c['builders'].append(util.BuilderConfig(name='CBRC',slavenames=['CBRC'],factory=f_cbrc))
c['builders'].append(util.BuilderConfig(name='EC00',slavenames=['EC00'],factory=f_stelletto))
#c['builders'].append(util.BuilderConfig(name='Kyoto',slavenames=['Kyoto'],factory=f_kyoto))
c['builders'].append(util.BuilderConfig(name='Leibniz',slavenames=['Leibniz'],factory=f_leibniz))
c['builders'].append(util.BuilderConfig(name='Nightly',slavenames=['Yokota01'],factory=f_nightly))
c['builders'].append(util.BuilderConfig(name='Shaheen2',slavenames=['Shaheen2'],factory=f_shaheen2))
c['builders'].append(util.BuilderConfig(name='Taura',slavenames=['Taura'],factory=f_taura))
c['builders'].append(util.BuilderConfig(name='Tokyo',slavenames=['Tokyo'],factory=f_tokyo))
c['builders'].append(util.BuilderConfig(name='Yasuoka',slavenames=['Yasuoka'],factory=f_yasuoka))
c['builders'].append(util.BuilderConfig(name='Yokota01',slavenames=['Yokota01'],factory=f_yokota01))
c['builders'].append(util.BuilderConfig(name='Yokota02',slavenames=['Yokota02'],factory=f_yokota02))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([('exafmm','exafmm')]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'exaFMM'
c['titleURL'] = 'https://github.com/exafmm/exafmm'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://localhost:8010/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
